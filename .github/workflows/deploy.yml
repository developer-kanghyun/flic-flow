# 워크플로우 이름
name: CI/CD for Flic Flow

# 워크플로우 실행 조건: main 브랜치에 push가 발생했을 때만 실행
on:
  push:
    branches:
      - main

jobs:
  # 1. 빌드 및 테스트 잡 (Build and Test Job)
  build_and_test:
    runs-on: ubuntu-latest # GitHub 제공 가상머신에서 실행

    steps:
      # 1-1. 소스코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v4

      # 1-2. GitHub Secrets를 사용하여 .env 파일 생성
      # 빌드 과정에서 환경 변수를 읽기 위해 필요
      - name: Create .env file for build
        run: |
          echo "VITE_TMDB_API_KEY=${{ secrets.VITE_TMDB_API_KEY }}" > .env
          echo "VITE_OMDB_API_KEY=${{ secrets.VITE_OMDB_API_KEY }}" >> .env
          echo "VITE_YOUTUBE_API_KEY=${{ secrets.VITE_YOUTUBE_API_KEY }}" >> .env

      # 1-3. Docker Buildx 설정 (멀티 플랫폼 빌드 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 1-4. Docker 이미지 빌드
      - name: Build Docker image for testing
        run: docker build -t temp-flic-flow-test:latest .

      # 1-5. 빌드된 이미지로 간단한 테스트 실행
      - name: Run a simple test on the built image
        run: |
          docker run -d -p 8080:80 --name test-container temp-flic-flow-test:latest
          echo "Waiting for container to start..."
          sleep 15
          echo "Checking if the server is responsive..."
          curl -f http://localhost:8080 || (docker logs test-container && exit 1)
          echo "Test passed!"
          docker stop test-container
          docker rm test-container

  # 2. 배포 잡 (Deploy Job) - 현재 비활성화
  deploy:
    # 'build_and_test' 잡이 성공해야만 이 잡이 실행됨
    needs: build_and_test
    runs-on: ubuntu-latest
    # SSH 연결 문제로 임시 비활성화
    if: false

    steps:
      # 2-1. 소스코드 다시 가져오기
      - name: Checkout code
        uses: actions/checkout@v4

      # 2-2. Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 2-3. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2-4. 최종 이미지 빌드 및 Docker Hub에 푸시
      # 이번에는 환경 변수를 build-args로 전달하는 것이 더 안전하고 표준적인 방식
      - name: Build and push final image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flic-flow:latest
          build-args: |
            VITE_TMDB_API_KEY=${{ secrets.VITE_TMDB_API_KEY }}
            VITE_OMDB_API_KEY=${{ secrets.VITE_OMDB_API_KEY }}
            VITE_YOUTUBE_API_KEY=${{ secrets.VITE_YOUTUBE_API_KEY }}

      # 2-5. SSH를 통해 실제 서버에 배포
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "--- Starting deployment on server ---"

            # Docker Hub에서 최신 이미지 가져오기
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/flic-flow:latest

            # 기존 컨테이너 중지 및 삭제 (실패해도 계속 진행)
            docker stop flic-flow-container || true
            docker rm flic-flow-container || true

            # 새 이미지로 컨테이너 실행 (리버스 프록시 환경)
            docker run -d -p 127.0.0.1:8080:80 \
              --name flic-flow-container \
              --restart=unless-stopped \
              ${{ secrets.DOCKER_HUB_USERNAME }}/flic-flow:latest

            # 사용하지 않는 이전 이미지 정리
            docker image prune -f

            echo "--- Deployment finished successfully! ---"
